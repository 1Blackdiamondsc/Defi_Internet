"use strict";const Hoek=require("@hapi/hoek"),Any=require("../any"),internals={};internals.Lazy=class extends Any{constructor(){super(),this._type="lazy",this._flags.once=!0,this._cache=null}_init(e,s){return this.set(e,s)}_base(e,s,t){let n;if(this._cache)n=this._cache;else{const o={value:e},r=this._flags.lazy;if(!r)return o.errors=this.createError("lazy.base",null,s,t),o;if(!((n=r())instanceof Any))return o.errors=this.createError("lazy.schema",{schema:n},s,t),o;this._flags.once&&(this._cache=n)}return n._validate(e,s,t)}set(e,s){if(Hoek.assert("function"==typeof e,"You must provide a function as first argument"),Hoek.assert(void 0===s||s&&"object"==typeof s&&!Array.isArray(s),"Options must be an object"),s){const e=Object.keys(s).filter(e=>!["once"].includes(e));Hoek.assert(0===e.length,`Options contain unknown keys: ${e}`),Hoek.assert(void 0===s.once||"boolean"==typeof s.once,'Option "once" must be a boolean')}const t=this.clone();return t._flags.lazy=e,s&&s.once!==t._flags.once&&(t._flags.once=s.once),t}},module.exports=new internals.Lazy;