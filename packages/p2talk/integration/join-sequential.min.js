"use strict";const assert=require("assertthat"),async=require("async"),createPeers=require("./createPeers"),runTest=require("./runTest");runTest(__filename,e=>s=>{createPeers({count:e.ringSize,serviceInterval:e.serviceInterval},(t,r,a)=>{assert.that(t).is.null(),async.series([s=>{a.waitUntil(r,{interval:e.serviceInterval}).have("status").equalTo({status:"lonely"},s)},s=>{const t=[];async.eachSeries(r,(s,r)=>{if(t.push(s),1===t.length)return r(null);async.series([e=>{s.join(t[0],e)},s=>{a.waitUntil(t,{interval:e.serviceInterval}).have("status").equalTo({status:"joined"},s)},e=>{a.isRing(t,e)}],r)},s)},e=>{a.stop(r,e)}],s)})});